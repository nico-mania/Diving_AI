package s0573175;import java.awt.Color;import java.awt.Point;import java.util.ArrayList;import lenz.htw.ai4g.ai.*;public class AbnidulcoNEW extends AI {    int scoreBeimLetztenAufrufVonUpdate;    int previousFortune;    Point[] pearls = info.getScene().getPearl();    Point[] bottles = info.getScene().getRecyclingProducts();    Grid grid;    private Point[] currentPearlPath;    private int currentPearlPathIndex;    private Point[] currentSurfacePath;    private int currentSurfacePathIndex;    private Point[] currentBottlePath;    private int currentBottlePathIndex;    private Boolean boughtItemAir = false;    private Boolean boughtItemSpeed = false;    public AbnidulcoNEW(Info info) {        super(info);        enlistForTournament(573175, 573144);        grid = new Grid(info.getScene().getWidth(), info.getScene().getHeight(),info.getScene().getObstacles(), 0.3);    }    @Override    public Color getColor() {        return Color.ORANGE;    }    @Override    public String getName() {        return "Abni Dulco";    }    @Override    public PlayerAction update() {        if (info.getScore() != scoreBeimLetztenAufrufVonUpdate) {            pearls = takePearl();            scoreBeimLetztenAufrufVonUpdate = info.getScore();            currentPearlPath = null;        }        if(info.getFortune() != previousFortune){            bottles = takeBottle();            previousFortune = info.getFortune();            currentBottlePath = null;        }        var diverPosition = new Point(info.getX(), info.getY());        if(diverPosition.y == 0)        {            currentSurfacePath = null;        }        if(currentSurfacePath != null || info.getAir() < 450){            return steerToSurface();        }        currentSurfacePath = null;        if(info.getFortune() < 2 && (!boughtItemAir || !boughtItemSpeed)){            return steerToBottle();        }        currentBottlePath = null;        if(info.getFortune() >= 2 && (!boughtItemAir || !boughtItemSpeed)){            if (info.getX() ==info.getScene().getShopPosition() && info.getY() == 0 && boughtItemAir){                boughtItemSpeed = true;                return new ShoppingAction(ShoppingItem.STREAMLINED_WIG);            }            if (info.getX() == info.getScene().getShopPosition() && info.getY() == 0){                boughtItemAir = true;                return new ShoppingAction(ShoppingItem.BALLOON_SET);            }            return steerToShop();        }        return steerToNearestPearl();    }    private PlayerAction steerToNearestPearl(){        var diverPosition = new Point(info.getX(), info.getY());        if(currentPearlPath == null){            currentPearlPath = grid.findPath(diverPosition, getNearestPearlPosition());            currentPearlPathIndex = 0;        }        if ((diverPosition.distance(currentPearlPath[currentPearlPathIndex]) <= 2 && currentPearlPathIndex + 1 < currentPearlPath.length) ||                (currentPearlPathIndex + 1 < currentPearlPath.length && diverPosition.distance(currentPearlPath[currentPearlPathIndex + 1]) < diverPosition.distance(currentPearlPath[currentPearlPathIndex]))){            currentPearlPathIndex++;        }        return new DivingAction(info.getMaxVelocity(), seek(currentPearlPath[currentPearlPathIndex]));    }    private PlayerAction steerToBottle(){        var diverPosition = new Point(info.getX(), info.getY());        if(currentBottlePath == null){            currentBottlePath = grid.findPath(diverPosition, getNearestBottlePosition());            currentBottlePathIndex = 0;        }        if ((diverPosition.distance(currentBottlePath[currentBottlePathIndex]) <= 2 && currentBottlePathIndex + 1 < currentBottlePath.length) ||                (currentBottlePathIndex + 1 < currentBottlePath.length && diverPosition.distance(currentBottlePath[currentBottlePathIndex + 1]) < diverPosition.distance(currentBottlePath[currentBottlePathIndex]))){            currentBottlePathIndex++;        }        return new DivingAction(info.getMaxVelocity(), seek(currentBottlePath[currentBottlePathIndex]));    }    private PlayerAction steerToSurface(){        currentPearlPath = null;        currentBottlePath = null;        var diverPosition = new Point(info.getX(), info.getY());        if(currentSurfacePath == null){            currentSurfacePath = grid.findPath(diverPosition, new Point (info.getX(), 0));            currentSurfacePathIndex = 0;        }        if(diverPosition.distance(currentSurfacePath[currentSurfacePathIndex]) <= 2 && currentSurfacePathIndex + 1 < currentSurfacePath.length){            currentSurfacePathIndex++;        }        return new DivingAction(info.getMaxVelocity(), seek(currentSurfacePath[currentSurfacePathIndex]));    }    private PlayerAction steerToShop(){        currentPearlPath = null;        currentBottlePath = null;        return new DivingAction(info.getMaxVelocity(), seek(new Point(info.getScene().getShopPosition(), 0)));    }    private float seek(Point target) {        int x = target.x - info.getX();        int y = target.y - info.getY();        double direction = Math.atan2(y,x);        return (float) direction;    }    public Point[] takePearl() {        var remainingPearls = new ArrayList<Point>();        for (var pearl : pearls) {            if (pearl != getNearestPearlPosition()) {                remainingPearls.add(pearl);            }        }        var remainingPearlsArray = new Point[remainingPearls.size()];        return remainingPearls.toArray(remainingPearlsArray);    }    public Point[] takeBottle() {        var remainingBottles = new ArrayList<Point>();        for (var bottle : bottles) {            if (bottle != getNearestBottlePosition()){                remainingBottles.add(bottle);            }        }        var remainingBottleArray = new Point[remainingBottles.size()];        return remainingBottles.toArray(remainingBottleArray);    }    private Point getNearestPearlPosition(){        var minDistanceToDiver = Double.MAX_VALUE;        var playerPosition = new Point(info.getX(), info.getY());        var nearestPearlPosition = new Point();        for (var pearl : pearls) {            double distance = pearl.distance(playerPosition);            if(distance < minDistanceToDiver) {                minDistanceToDiver = distance;                nearestPearlPosition = pearl;            }        }        return nearestPearlPosition;    }    private Point getNearestBottlePosition(){        var minDistanceToDiver = Double.MAX_VALUE;        var playerPosition = new Point(info.getX(), info.getY());        var nearestBottlePosition = new Point();        for (var bottle : bottles) {            double distance = bottle.distance(playerPosition);            if(distance < minDistanceToDiver) {                minDistanceToDiver = distance;                nearestBottlePosition = bottle;            }        }        return nearestBottlePosition;    }}